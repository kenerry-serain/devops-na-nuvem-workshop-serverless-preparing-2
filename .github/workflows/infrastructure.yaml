name: Infrastructure Pipeline

on:
  push:
    branches:
    - 'main'
    - 'feature**'
    paths:
    - 'infrastructure/**'
  delete:
    branches:
    - 'feature**'

env:
  SAM_TEMPLATE: ./infrastructure/template.yml
  DEVELOPMENT_STACK_NAME: infrastructure-stack-development
  PRODUCTION_STACK_NAME: infrastructure-stack-production

permissions:
  id-token: write
  contents: read

jobs:
  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the development pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.DEVELOPMENT_REGION }}
          role-to-assume: ${{ vars.DEVELOPMENT_PIPELINE_EXECUTION_ROLE }}
          role-session-name: development-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name infrastructure-stack-$(echo ${FEATURE_BRANCH_NAME} | tr '/' '-') \
            --region ${{vars.DEVELOPMENT_REGION}} \
            --no-prompts

  build-and-deploy-feature:
    if: startsWith(github.ref, 'refs/heads/feature')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the development pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.DEVELOPMENT_REGION }}
          role-to-assume: ${{ vars.DEVELOPMENT_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the development account
        shell: bash
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam deploy --stack-name infrastructure-stack-$(echo ${FEATURE_BRANCH_NAME} | tr '/' '-') \
            --capabilities CAPABILITY_IAM \
            --region ${{vars.DEVELOPMENT_REGION}} \
            --s3-bucket ${{vars.DEVELOPMENT_ARTIFACTS_BUCKET}} \
            --no-fail-on-empty-changeset \
            --role-arn ${{vars.DEVELOPMENT_CLOUDFORMATION_EXECUTION_ROLE}} \
            --parameter-overrides TagEnvironment=$(echo ${FEATURE_BRANCH_NAME} | tr '/' '-'), \
              CertificateArn=${{vars.CERTIFICATE_ARN}}, \
              HostedZoneId=${{vars.HOSTED_ZONE_ID}}

  build-and-deploy-development:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the development pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.DEVELOPMENT_REGION }}
          role-to-assume: ${{ vars.DEVELOPMENT_PIPELINE_EXECUTION_ROLE }}
          role-session-name: development-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Upload artifacts to development artifact buckets
        run: |
          sam package \
            --s3-bucket ${{vars.DEVELOPMENT_ARTIFACTS_BUCKET}} \
            --region ${{vars.DEVELOPMENT_REGION}} \
            --output-template-file packaged-development.yaml

      - name: Deploy to development account
        run: |
          sam deploy --stack-name ${{env.DEVELOPMENT_STACK_NAME}} \
            --template packaged-development.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${{vars.DEVELOPMENT_REGION}} \
            --s3-bucket ${{vars.DEVELOPMENT_ARTIFACTS_BUCKET}} \
            --no-fail-on-empty-changeset \
            --role-arn ${{vars.DEVELOPMENT_CLOUDFORMATION_EXECUTION_ROLE}} \
            --parameter-overrides TagEnvironment=$(echo ${FEATURE_BRANCH_NAME} | tr '/' '-'), \
              CertificateArn=${{vars.CERTIFICATE_ARN}}, \
              HostedZoneId=${{vars.HOSTED_ZONE_ID}}

  build-and-deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-deploy-development]
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v4
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.PRODUCTION_REGION }}
          role-to-assume: ${{ vars.PRODUCTION_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container
  
      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${{vars.PRODUCTION_ARTIFACTS_BUCKET}} \
            --region ${{vars.PRODUCTION_REGION}} \
            --output-template-file packaged-prod.yaml

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PRODUCTION_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${{vars.PRODUCTION_REGION}} \
            --s3-bucket ${{vars.PRODUCTION_ARTIFACTS_BUCKET}} \
            --no-fail-on-empty-changeset \
            --role-arn ${{vars.PRODUCTION_CLOUDFORMATION_EXECUTION_ROLE}} \
            --parameter-overrides TagEnvironment=$(echo ${FEATURE_BRANCH_NAME} | tr '/' '-'), \
              CertificateArn=${{vars.CERTIFICATE_ARN}}, \
              HostedZoneId=${{vars.HOSTED_ZONE_ID}}
